{"version":3,"sources":["scripts/Game.js","scripts/main.js"],"names":["Game","field","Array","fill","score","min","max","Math","round","random","matrix","reduce","acc","item","map","col","i","row","scoreCallback","sums","length","j","unshift","num","transposedMatrix","transpose","processRow","reverse","resultMatrix","column","getRandomNumber","flatMatrix","getFlatMaxtix","generateNumber","START_NUMBERS","direction","key","processUp","processDown","processRight","processLeft","fieldSize","currentElement","game","cells","document","getElementsByClassName","getElementById","calculateScore","textContent","getScore","toString","isGameOver","messages","isLose","classList","remove","removeEventListener","mooveField","isWin","renderScreen","getField","add","start","startButton","addEventListener","resetField","moove"],"mappings":"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","file":"main.7a48056f.js","sourceRoot":"..\\src","sourcesContent":["export class Game {\n  static getRandomNumber(min, max) {\n    return Math.round(Math.random() * (max - min) + min);\n  }\n\n  static getFlatMaxtix(matrix) {\n    return matrix.reduce((acc, item) => {\n      return [...acc, ...item];\n    }, []);\n  }\n\n  static transpose(matrix) {\n    return matrix[0].map((col, i) => matrix.map(row => row[i]));\n  }\n\n  static processRow(row, scoreCallback) {\n    const sums = [];\n\n    for (let i = row.length - 1; i >= 0; i--) {\n      for (let j = i - 1; j >= 0; j--) {\n        if (row[j] !== 0 && row[j] === row[i]) {\n          sums.unshift(row[i] + row[j]);\n          scoreCallback(row[i] + row[j]);\n\n          row[i] = 0;\n          row[j] = 0;\n\n          break;\n        } else if (row[j] !== 0 && row[j] !== row[i]) {\n          break;\n        }\n      }\n\n      if (row[i] !== 0) {\n        sums.unshift(row[i]);\n        row[i] = 0;\n      }\n    }\n\n    for (const num of row) {\n      if (num !== 0) {\n        sums.unshift(num);\n      }\n    }\n\n    while (sums.length !== 4) {\n      sums.unshift(0);\n    }\n\n    return sums;\n  };\n\n  static processUp(matrix, scoreCallback) {\n    const transposedMatrix = Game.transpose(matrix);\n\n    for (let i = 0; i < matrix.length; i++) {\n      transposedMatrix[i] = Game\n        .processRow(transposedMatrix[i].reverse(), scoreCallback)\n        .reverse();\n    }\n\n    const resultMatrix = Game.transpose(transposedMatrix);\n\n    for (let i = 0; i < matrix.length; i++) {\n      matrix[i] = resultMatrix[i];\n    }\n  };\n\n  static processDown(matrix, scoreCallback) {\n    const transposedMatrix = Game.transpose(matrix);\n\n    for (let i = 0; i < matrix.length; i++) {\n      transposedMatrix[i] = Game.processRow(transposedMatrix[i], scoreCallback);\n    }\n\n    const resultMatrix = Game.transpose(transposedMatrix);\n\n    for (let i = 0; i < matrix.length; i++) {\n      matrix[i] = resultMatrix[i];\n    }\n  };\n\n  static processRight(matrix, scoreCallback) {\n    for (let i = 0; i < matrix.length; i++) {\n      matrix[i] = Game.processRow(matrix[i], scoreCallback);\n    }\n  };\n\n  static processLeft(matrix, scoreCallback) {\n    for (let i = 0; i < matrix.length; i++) {\n      matrix[i] = Game.processRow(matrix[i].reverse(), scoreCallback).reverse();\n    }\n  };\n\n  static generateNumber(matrix) {\n    const column = Game.getRandomNumber(0, 3);\n    const row = Game.getRandomNumber(0, 3);\n    const flatMatrix = Game.getFlatMaxtix(matrix);\n\n    if (Math.min(...flatMatrix) !== 0) {\n      return;\n    }\n\n    if (matrix[column][row] === 0) {\n      matrix[column][row] = Game.START_NUMBERS[Game.getRandomNumber(0, 1)];\n\n      return;\n    }\n\n    this.generateNumber(matrix);\n  }\n\n  constructor() {\n    this.field = [\n      new Array(4).fill(0),\n      new Array(4).fill(0),\n      new Array(4).fill(0),\n      new Array(4).fill(0),\n    ];\n    this.score = 0;\n  }\n\n  resetField() {\n    this.score = 0;\n\n    for (const row of this.field) {\n      row.fill(0);\n    }\n\n    for (let i = 0; i < 2; i++) {\n      const column = Game.getRandomNumber(0, 3);\n      const row = Game.getRandomNumber(0, 3);\n\n      if (this.field[column][row] !== 0) {\n        i--;\n        continue;\n      }\n\n      this.field[column][row] = Game.START_NUMBERS[Game.getRandomNumber(0, 1)];\n    }\n  }\n\n  moove(direction) {\n    const scoreCallback = (num) => {\n      this.score += num;\n    };\n\n    switch (direction.key) {\n      case 'ArrowUp':\n        Game.processUp(this.field, scoreCallback);\n        break;\n      case 'ArrowDown':\n        Game.processDown(this.field, scoreCallback);\n        break;\n      case 'ArrowRight':\n        Game.processRight(this.field, scoreCallback);\n        break;\n      case 'ArrowLeft':\n        Game.processLeft(this.field, scoreCallback);\n        break;\n    }\n\n    Game.generateNumber(this.field);\n  }\n\n  isLose() {\n    const fieldSize = this.field.length;\n\n    for (let i = 0; i < fieldSize; i++) {\n      for (let j = 0; j < fieldSize; j++) {\n        const currentElement = this.field[i][j];\n\n        if (j + 1 < fieldSize && currentElement === this.field[i][j + 1]) {\n          return false;\n        }\n\n        if (j - 1 >= 0 && currentElement === this.field[i][j - 1]) {\n          return false;\n        }\n\n        if (i + 1 < fieldSize && currentElement === this.field[i + 1][j]) {\n          return false;\n        }\n\n        if (i - 1 >= 0 && currentElement === this.field[i - 1][j]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  getField() {\n    return this.field;\n  }\n\n  getScore() {\n    return this.score;\n  }\n}\n\nGame.START_NUMBERS = [2, 4];\n","import { Game } from './Game.js';\n\nconst game = new Game();\nconst cells = document.getElementsByClassName('field-cell');\nconst score = document.getElementById('scoreboard');\n\nconst calculateScore = () => {\n  score.textContent = Math.max(game.getScore(), +score.textContent).toString();\n};\n\nconst isGameOver = (field) => {\n  const messages = document.getElementsByClassName('message');\n\n  if (game.isLose()) {\n    messages[0].classList.remove('hidden');\n    document.removeEventListener('keydown', mooveField);\n  }\n};\n\nconst isWin = (field) => {\n  const messages = document.getElementsByClassName('message');\n\n  if (Math.max(...field) === 2048) {\n    messages[1].classList.remove('hidden');\n  }\n};\n\nconst renderScreen = () => {\n  const field = Game.getFlatMaxtix(game.getField());\n\n  for (let i = 0; i < cells.length; i++) {\n    cells[i].classList.remove(cells[i].classList[1]);\n    cells[i].classList.add(`field-cell--${field[i]}`);\n  }\n\n  calculateScore(field);\n\n  if (Math.max(...field) === 2048 || Math.min(...field) !== 0) {\n    isGameOver(field);\n  }\n\n  isWin(field);\n};\n\nconst start = () => {\n  const messages = document.getElementsByClassName('message');\n  const startButton = document.getElementById('start');\n\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n  startButton.textContent = 'Restart';\n\n  document.addEventListener('keydown', mooveField, false);\n\n  for (const message of messages) {\n    message.classList.add('hidden');\n  }\n\n  game.resetField();\n  renderScreen();\n};\n\nconst mooveField = (direction) => {\n  game.moove(direction);\n  renderScreen();\n};\n\ndocument.getElementById('start').addEventListener('click', start, false);\n"]}